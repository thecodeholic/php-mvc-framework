<?php

try {
    // If not even a single command was provided
    if (!isset($argv[1])) {
        throw new Exception('!!! Zero commands: No command was provided !!!');
    }

    // Re-arrange the command argument(s)
    $arguments = restructureArgsArray($argv);

    // Compare command(s) & execute their corresponding code
    switch ($argv[1]) {
        // For command 'php codeholic serve'
        case 'serve':
            serveTheApp($arguments);
            break;

        // If an invalid command is provided
        default:
            throw new Exception("!!! Invalid command : [ $argv[1] ] !!!");
            break;
    }
} catch (Throwable $error) {
    echo getPrettyError($error->getMessage());
    exit;
}

/**
 * Re-arrange the user provided command line arguments
 * 
 * @param array $argv => Contains command-line arguments provided by the user
 * 
 * @return array $newArgsArray => Contains restructered command-line arguments
 */
function restructureArgsArray(array $args)
{
    // Remove first two 'key => value' pairs from the array as they are not really neeeded
    $args           =   array_slice($args, 2);
    $newArgsArray   =   [];

    // Convert each array element to a new 'key => value' pair
    // For example, '--port=8080' to '--port' => '8080'
    foreach ($args as $arg) {
        if (strpos($arg, '=')) {
            $newArgsArray[strtok($arg, '=')] = strtok('');
            continue;
        }

        $newArgsArray[$arg] = false;
    }

    return $newArgsArray;
}

/**
 * Serve the app using the command 'php codeholic serve'
 * 
 * @param array $argsArray => A restructered array containing command-line arguments
 * 
 * @return null
 */
function serveTheApp(array $argsArray)
{
    $pathToMainIndex    =   'public/';      // Path to the entry point of our app
    $host               =   '127.0.0.1';    // Default 'host' name for our app to use
    $port               =   8080;           // Default 'port' number for our app to use
    $maxPort            =   null;           // Default value of 'maxPort'

    // Re-usable contents of the exception message
    $exceptionStart =  "!!! 'php codeholic serve': ";
    $exceptionEnd   =  " !!!";

    // Possible parameters for the 'php codeholic serve' command
    // For example, '--port=8080', '--host=127.0.0.1', '--max-port=9010'
    $validArgs = [
        'host'      =>  '--host',
        'port'      =>  '--port',
        'maxPort'   =>  '--max-port'
    ];

    // If an invalid parameter is encountered, throw the exception
    foreach ($argsArray as $arg => $value) {
        if (!in_array($arg, $validArgs)) {
            throw new Exception($exceptionStart . "Invalid argument provided [ $arg ]" . $exceptionEnd);
        }
    }

    // Default statuses
    $customHostSpecified    =   array_key_exists($validArgs['host'], $argsArray);
    $customPortSpecified    =   array_key_exists($validArgs['port'], $argsArray);
    $customMaxPortSpecified =   array_key_exists($validArgs['maxPort'], $argsArray);

    // Get 'host' name if the user provides it
    if ($customHostSpecified) {
        $host = (string) $argsArray[$validArgs['host']];
    }

    // Get 'port' number if the user provides it
    if ($customPortSpecified) {
        $port = (int) $argsArray[$validArgs['port']];
    }

    // Get 'max-port' number if the user provides it
    if ($customMaxPortSpecified) {
        $maxPort = (int) $argsArray[$validArgs['maxPort']];
    }

    // Validate 'port' as an integer
    validatePortNumber($port, $exceptionStart . "Invalid argument value [ --port=$port ]" . $exceptionEnd);

    // Validate 'maxPort' as an integer only when its value is provided
    if ($maxPort) {
        validatePortNumber($maxPort, $exceptionStart . "Invalid argument value [ --max-port=$maxPort ]" . $exceptionEnd);
    }

    // Make sure '--max-port' is not lesser than '--port'              
    if (isset($maxPort) && $maxPort < $port) {
        throw new Exception($exceptionStart . "The value '--max-port=$maxPort' must not be less than '--port=$port'" . $exceptionEnd);
    }

    // Make sure that the value of '--max-port' is not too high, as we don't want the 'for loop' below to run like forever
    if ($maxPort && $maxPort > ($maxPortLimit = $port + 100)) {
        $maxPortValidationMessage = "The value [ --max-port=$maxPort ] must not be greater than [ '--port=$port' + 100 = $maxPortLimit ]";
        throw new Exception($exceptionStart . $maxPortValidationMessage . $exceptionEnd);
    }

    // For better code readability
    $dynamicPortSelectable = version_compare(phpversion(), '8.0.0') > -1 && !$customPortSpecified && !$customMaxPortSpecified;
    
    // If PHP version is 8.0.0 or up, dynamically select a port to run PHP's built-in server on
    if ($dynamicPortSelectable) {
        executeCommand("php -S $host:0 -t $pathToMainIndex");
        exit;
    }

    $maxPort = $maxPort ?? $port + 60;  // Set the limit upto which to try to run PHP's built-in server on
    $minPort = $port;                   // Preserve original value of '$port' so that it can be used in the below exception message

    // Find out the port that is open & try running PHP's built-in server on it
    for ($port; $port <= $maxPort; $port++) {
        if (executeCommand("php -S $host:$port -t $pathToMainIndex")) {
            exit;
        }
    }

    // For better readability
    $portUnavailableMessage = "No port within the range [ $minPort <---> $maxPort ] is open. Maybe, try a different ports range";

    // Default exception message
    $exceptionMessage = $exceptionStart . $portUnavailableMessage . $exceptionEnd;

    // If values of both '--port' & '--max-port' parameters are the same, change the exception message
    if ($minPort === $maxPort) {
        $portUnavailableMessage = "The specified port [ $minPort ] is not open. Maybe, try a different port";
        $exceptionMessage = $exceptionStart . $portUnavailableMessage . $exceptionEnd;
    }

    // If no port was open, then throw the exception
    throw new Exception($exceptionMessage);
}

/**
 * Try executing the given PHP command without stopping the program execution
 * If this function returns true, it means that the given command was successfully executed
 * 
 * @param string $commandText
 * 
 * @return true|false
 */
function executeCommand(string $commandText)
{
    exec($commandText, $output, $return);
    return $return === 0;
}

/**
 * Get nicely formatted error message
 * 
 * @param string $message
 * 
 * @return string
 */
function getPrettyError(string $message)
{
    $asterisks      =   '';
    $asteriskLimit  =   strlen($message);

    for ($i = 0; $i <= $asteriskLimit; $i++) {
        $asterisks .= '*';
    }

    return PHP_EOL . $asterisks . PHP_EOL . $message . PHP_EOL . $asterisks . PHP_EOL;
}

/**
 * Validate that the given input is a valid port number
 * 
 * @param mixed $input
 * @param string $exceptionMessage
 * 
 * @throws Exception
 * 
 * @return true
 */
function validatePortNumber(mixed $input, string $exceptionMessage = '')
{
    // The given input must be valid integer between the range '[ 0 - 65535 ]'
    $inputIsValidPort = filter_var($input, FILTER_VALIDATE_INT, ['options' => ['min_range' => 0, 'max_range' => 65535]]) || (int) $input === 0;

    if ($inputIsValidPort) {
        return true;
    }

    throw new Exception($exceptionMessage);
}
