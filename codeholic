<?php

try {
    // If no arguments were provided in the command line
    if (!isset($argv[1])) {
        throw new Exception('!!! Zero commands: No command was provided !!!');
    }

    // Re-arrange the command-line arguments
    $arguments = restructureArgsArray($argv);

    // Compare command-line arguments and execute their corresponding code
    switch ($argv[1]) {
        // For command 'php codeholic serve'
        case 'serve':
            serveTheApp($arguments);
            break;

        // If an invalid command-line argument is provided
        default:
            throw new Exception("!!! Invalid command : [ $argv[1] ] !!!");
            break;
    }
} catch (\Exception $error) {
    echo getPrettyError($error->getMessage());
    exit;
}

/**
 * Re-arrange the user provided command line arguments
 * 
 * @param array $argv => Contains command-line arguments provided by the user
 * 
 * @return array $newArgsArray => Contains restructered command-line arguments
 */
function restructureArgsArray(array $args)
{
    // Remove first two 'key => value' pairs from the array as they are not really neeeded
    $args = array_slice($args, 2);

    $newArgsArray = [];

    // Convert each array element to a new 'key => value' pair
    // For example, '--port=8080' to '--port' => '8080'
    foreach ($args as $arg) {
        if (strpos($arg, '=')) {
            $newArgsArray[strtok($arg, '=')] = strtok('');
            continue;
        }

        $newArgsArray[$arg] = false;
    }

    return $newArgsArray;
}

/**
 * Serve the app using the command 'php codeholic serve'
 * 
 * @param array $argsArray => A restructered array containing command-line arguments
 * 
 * @return null
 */
function serveTheApp(array $argsArray)
{
    $pathToMainIndex    =   'public/';      // Path to the entry point of our app
    $host               =   '127.0.0.1';    // Default 'host' url for our app
    $port               =   8080;           // Default port for our app to use
    $maxPort            =   null;           // Initial value of the '--max-port'          

    // Possible parameters for the 'php codeholic serve' command
    // For example, '--port=8080', '--host=127.0.0.1', '--max-port=9010'
    $possibleParams = [
        'host'      =>  '--host',
        'port'      =>  '--port',
        'maxPort'   =>  '--max-port'
    ];

    // If an invalid parameter is encountered, throw the exception
    foreach ($argsArray as $arg => $value) {
        if (!in_array($arg, $possibleParams)) {
            throw new Exception("!!! 'php codeholic serve': Invalid parameter [ $arg ] !!!");
        }

        // If no value for parameter is passed, throw an exception
        // In future, this needs to be changed, if we introduce a new parameter that does not require a value
        if (!$value) {
            throw new Exception("!!! 'php codeholic serve': Invalid value for the parameter [ $arg ] !!!");
        }
    }

    // If the user provides a custom host url
    if (array_key_exists($possibleParams['host'], $argsArray)) {
        $host = $argsArray[$possibleParams['host']];
    }

    // If the user provides a custom port number
    if (array_key_exists($possibleParams['port'], $argsArray)) {
        $port = $argsArray[$possibleParams['port']];
    }

    // If the user explicitly specifies max port limit
    if (array_key_exists($possibleParams['maxPort'], $argsArray)) {
        $maxPort = $argsArray[$possibleParams['maxPort']];
    }

    // Validate port & max port as integers
    validateInteger($port, "!!! 'php codeholic serve': Invalid argument value [ --port=$port ] !!!");

    // Validate '--max-port' only when its value is provided
    if ($maxPort) {
        validateInteger((int) $maxPort, "!!! 'php codeholic serve': Invalid argument value [ --max-port=$maxPort ] !!!");
    }

    // Make sure '--max-port' is always greater than '--port'                  
    if ($maxPort && $maxPort < $port) {
        throw new Exception("!!! 'php codeholic serve': The value '--max-port=$maxPort' must not be less than '--port=$port' !!!");
    }

    // For better code readability
    $selectPortDynamically = version_compare(phpversion(), '8.0.0') > -1
        && !array_key_exists($possibleParams['port'], $argsArray)
        && !array_key_exists($possibleParams['maxPort'], $argsArray);
    
    // If PHP version is 8.0.0 or up, dynamically select a port to run PHP's built-in server on
    if ($selectPortDynamically) {
        executeCommand("php -S $host:0 -t $pathToMainIndex");
        exit;
    }

    // Set the limit upto which to try to run PHP's built-in server on
    $maxPort = $maxPort ?? $port + 60;

    // To make sure that an appropriate value gets printed for '$port' & not the incremented value in the below exception message
    $minPort = $port;

    // Find out the port that is open for use in the given range
    for ($port; $port <= $maxPort; $port++) {
        if (executeCommand("php -S $host:$port -t $pathToMainIndex")) {
            exit;
        }
    }

    // Default exception message
    $exceptionMessage = "!!! 'php codeholic serve': No port within the range [ $minPort <==> $maxPort ] is open. Maybe, try a different ports range !!!";

    // If values of both '--port' & '--max-port' parameters are the same, change the exception message
    if ($minPort === $maxPort) {
        $exceptionMessage = "!!! 'php codeholic serve': The specified port [ $minPort ] is not open. Maybe, try a different port !!!";
    }

    // If no port was free within the given range, then throw an exception
    throw new Exception($exceptionMessage);
}

/**
 * Execute the given PHP command without throwing an error
 * If this function returns true, it means that the given command was successfully executed
 * 
 * @param string $commandText
 * 
 * @return true|false
 */
function executeCommand(string $commandText)
{
    exec($commandText, $output, $return);
    return $return === 0;
}

/**
 * Get nicely formatted error message
 * 
 * @param string $message
 * 
 * @return string
 */
function getPrettyError(string $message)
{
    $asterisks      =   '';
    $asteriskLimit  =   strlen($message);

    for ($i = 0; $i <= $asteriskLimit; $i++) {
        $asterisks .= '*';
    }

    return PHP_EOL . $asterisks . PHP_EOL . $message . PHP_EOL . $asterisks . PHP_EOL;
}

/**
 * Validate that the given input is an integer
 * 
 * @param mixed $input
 * @param string $exceptionMessage
 * 
 * @throws Exception
 * 
 * @return true
 */
function validateInteger(mixed $input, string $exceptionMessage = '')
{
    if (!filter_var($input, FILTER_VALIDATE_INT)) {
        throw new Exception($exceptionMessage);
    }

    return true;
}
